version: 2.1

orbs:
  docker: circleci/docker@3.0.0

# Job definitions
jobs:
  build:
    docker:
      - image: cimg/python:3.13-node
    resource_class: large
    steps:
      - checkout
      - run:
          name: Install Emscripten SDK
          workdir: /home/circleci
          command: |
            git clone https://github.com/emscripten-core/emsdk.git
            cd emsdk
            ./emsdk install latest
            ./emsdk activate latest
      - run:
          name: Install pnpm with Corepack
          command: |
            npm install -g corepack@latest
            corepack enable
            corepack prepare pnpm@latest-10 --activate
            pnpm config set store-dir .pnpm-store
      - restore_cache:
          keys:
            - &cache-pnpm-key v1-libssh2-pnpm-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}
            - v1-libssh2-pnpm-{{ .Branch }}
            - v1-libssh2-pnpm-
      - restore_cache:
          keys:
            - &cache-vendors-key v1-libssh2-vendors-{{ .Branch }}-{{ checksum "packages/libssh2/package.json" }}
            - v1-libssh2-vendors-{{ .Branch }}
            - v1-libssh2-vendors-
      - run:
          name: Install dependencies
          command: pnpm i -r
      - save_cache:
          paths:
            - .pnpm-store
            - packages/libssh2/vendors
          key: *cache-pnpm-key
      - run:
          name: Build packages
          command: |
            source /home/circleci/emsdk/emsdk_env.sh
            pnpm -r build
      - save_cache:
          paths:
            - vendors
          key: *cache-vendors-key
      - persist_to_workspace:
          root: packages/libssh2/dist
          paths:
            - libssh2.js
            - libssh2.wasm
            - libssh2.d.ts
      - store_artifacts:
          path: packages/libssh2/dist

      # - run:
      #     name: Set up Docker Buildx context
      #     command: docker buildx create --name libssh2-builder --use
      # - docker/build:
      #     image: verdigristech/libssh2-wasm
      #     use_buildkit: true
      #     extra_build_args:
      #       --progress=plain
      #       --cache-from=type=local,src=/tmp/buildx-cache
      #       --cache-to=type=local,mode=max,dest=/tmp/buildx-cache
      #       --output=type=tar,dest=libssh2.tar
      # - run:
      #     name: Extract the build output
      #     command: |
      #       mkdir -p dist
      #       tar -xf libssh2.tar -C dist
      # - save_cache:
      #     paths:
      #       - /tmp/buildx-cache
      #     key: *cache-build-key
      # - persist_to_workspace:
      #     root: dist
      #     paths:
      #       - libssh2.js
      #       - libssh2.wasm
      #       - index.d.ts
      # - store_artifacts:
      #     path: dist

  publish:
    docker:
      - image: cimg/node:22.17
    resource_class: small
    steps:
      - checkout
      - attach_workspace:
          at: dist
      - run:
          name: Set npm token
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - run:
                name: Publish the build output to npm
                command: |
                  npm publish --access public
      - unless:
          condition: << pipeline.git.tag >>
          steps:
            - run:
                name: Publish the build output to npm (dry-run)
                command: |
                  npm publish --access public --dry-run

# Workflows
workflows:
  release:
    jobs:
      - build:
          filters:
            tags:
              only: /.*/
      - publish:
          context: npmjs.com
          requires:
            - build
          filters:
            branches:
              only: main
            tags:
              only: /.*/
