version: 2.1

orbs:
  gh: circleci/github-cli@2.7.1

commands:
  install-pnpm:
    description: |
      Installs pnpm with Corepack and activates it
    steps:
      - run:
          name: Install pnpm with Corepack
          command: |
            npm install -g corepack@latest
            corepack enable
            corepack prepare pnpm@latest-10 --activate
            pnpm config set store-dir .pnpm-store
  npm-auth:
    description: |
      Sets up npm authentication
    steps:
      - run:
          name: Set npm token
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

# Job definitions
jobs:
  build:
    docker:
      - image: cimg/python:3.13-node
    resource_class: xlarge
    steps:
      - checkout
      - run:
          name: Install Emscripten SDK
          workdir: /home/circleci
          command: |
            git clone https://github.com/emscripten-core/emsdk.git
            cd emsdk
            ./emsdk install latest
            ./emsdk activate latest
      - install-pnpm
      - restore_cache:
          keys:
            - &cache-pnpm-key v1-libssh2-pnpm-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}
            - v1-libssh2-pnpm-{{ .Branch }}
            - v1-libssh2-pnpm-
      - restore_cache:
          keys:
            - &cache-vendors-key v2-libssh2-vendors-{{ .Branch }}-{{ checksum "packages/libssh2/package.json" }}
            - v2-libssh2-vendors-{{ .Branch }}
            - v2-libssh2-vendors-
      - run:
          name: Install dependencies
          command: pnpm i -r
      - save_cache:
          paths:
            - .pnpm-store
          key: *cache-pnpm-key
      - run:
          name: Build packages
          command: |
            source /home/circleci/emsdk/emsdk_env.sh
            pnpm -r build
      - save_cache:
          paths:
            - packages/libssh2/vendors
          key: *cache-vendors-key
      - persist_to_workspace:
          root: packages/libssh2/dist
          paths:
            - libssh2.js
            - libssh2.wasm
            - libssh2.d.ts
      - store_artifacts:
          path: packages/libssh2/dist

  publish:
    docker:
      - image: cimg/node:22.17
    resource_class: small
    steps:
      - checkout
      - gh/setup
      - attach_workspace:
          at: "."
      - restore_cache:
          keys:
            - &cache-pnpm-key v1-libssh2-pnpm-{{ .Branch }}-{{ checksum "pnpm-lock.yaml" }}
            - v1-libssh2-pnpm-{{ .Branch }}
            - v1-libssh2-pnpm-
      - install-pnpm
      - npm-auth
      - run:
          name: Bump versions (no-op if no changeset)
          # Bump versions and commit them (see .changeset/config.json)
          command: |
            pnpm changeset version && git push origin main
      - run:
          name: Re-install dependencies in case of version bump
          command: pnpm i -r
      - save_cache:
          paths:
            - .pnpm-store
            - packages/libssh2/vendors
          key: *cache-pnpm-key
      - run:
          name: Publish packages (no-op if nothing to publish)
          command: pnpm changeset publish
      - run:
          name: Sync tags
          command: git push --follow-tags origin main

  # publish:
  #   docker:
  #     - image: cimg/node:22.17
  #   resource_class: small
  #   steps:
  #     - checkout
  #     - attach_workspace:
  #         at: "."
  #     - run:
  #         name: Set npm token
  #         command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
  #     - install-pnpm
  #     - run:
  #         name: Bump version
  #         command: pnpm changeset version
  #     - when:
  #         condition: << pipeline.git.tag >>
  #         steps:
  #           - run:
  #               name: Publish the build output to npm
  #               command: |
  #                 npm publish --access public
  #     - unless:
  #         condition: << pipeline.git.tag >>
  #         steps:
  #           - run:
  #               name: Publish the build output to npm (dry-run)
  #               command: |
  #                 npm publish --access public --dry-run

# Workflows
workflows:
  release:
    jobs:
      - build
      - publish:
          context:
            - github
            - npmjs.com
          requires:
            - build
          filters:
            branches:
              only: main
